{
  "name": "excel4node",
  "version": "0.0.10",
  "keywords": [
    "excel",
    "spreadsheet",
    "xlsx"
  ],
  "description": "Library to create Excel Files.",
  "author": {
    "name": "Nater",
    "email": "nater@seas.harvard.edu"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "dependencies": {
    "image-size": "~0.3.1",
    "jszip": "~2.3.0",
    "mime": "~1.2.11",
    "xmlbuilder": "~2.2.1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/natergj/excel4node.git"
  },
  "bugs": {
    "url": "https://github.com/natergj/excel4node/issues"
  },
  "main": "./lib/index",
  "readmeFilename": "README.md",
  "readme": "# excel4node\n\nAn OOXML (xlsx) generator that supports formatting options\n\n### Installation:\n\n```\nnpm install excel4node\n```\n\n### Usage:\n\nInstantiate a new workook\n\n```\nvar xl = require('excel4node');\nvar wb = new xl.WorkBook();\n```\n\nAdd a new WorkSheet to the workbook\n\n```\nvar ws = wb.WorkSheet('New Worksheet');\n```\n\nAdd a cell to a WorkSheet with some data.  \nCell can take 3 data types: String, Number, Formula    \nCell takes two arguments: row, col\n\n```\nws.Cell(1,1).String('My String');\nws.Cell(2,1).Number(5);\nws.Cell(2,2).Number(10);\nws.Cell(2,3).Formula(\"A2+B2\");\nws.Cell(2,4).Formula(\"A2/C2\");\n```\n\nSet Dimensions of Rows or Columns\n\n```\nws.Row(1).Height(30);\nws.Column(1).Width(100);\n```\n\nCreate a Style and apply it to a cell  \n\n* Font  \n  * Bold  \n    * Takes no arguments. Bolds text\n  * Italics\n  \t* Takes no arguments. Italicizes text\n  * Underline\n  \t* Takes no arguments. Underlines text\n  * Family\n  \t* Takes one argument: name of font family.\n  * Color\n  \t* Takes one argument: rbg color\n  * Size  \n  \t* Takes one argument: size in Pts\n  * WrapText\n  \t* Takes no arguments. Set text wrapping to true.\n  * Alignment\n  \t* Vertical\n  \t\t* Takes one argument of options top, center, bottom\n  \t* Horizontal\n  \t\t* Takes one argument of left, center, right\n* Number  \n  * Format\n  \t* Takes one argument: Number style string\n* Fill  \n  * Color\n  \t* Takes one argument: Color in rgb\n  * Pattern\n  \t* Takes one argument: pattern style (solid, lightUp, etc)\n* Border \n  * Takes one argument: object defining border\n  * each ordinal (top, right, etc) are only required if you want to define a border. If omitted, no border will be added to that side. \n  * style is required if oridinal is defined. if color is omitted, it will default to black. \n  * ```\n  {\n  \t\ttop:{\n  \t\t\tstyle:'thin',\n  \t\t\tcolor:'CCCCCC'\n  \t\t},\n  \t\tright:{\n  \t\t\tstyle:'thin',\n  \t\t\tcolor:'CCCCCC'\n  \t\t},\n  \t\tbottom:{\n  \t\t\tstyle:'thin',\n  \t\t\tcolor:'CCCCCC'\n  \t\t},\n  \t\tleft:{\n  \t\t\tstyle:'thin',\n  \t\t\tcolor:'CCCCCC'\n  \t\t},\n  \t\tdiagonal:{\n  \t\t\tstyle:'thin',\n  \t\t\tcolor:'CCCCCC'\n  \t\t}\n  \t}\n  ```\n\n\n```\nvar myStyle = wb.Style();\nmyStyle.Font.Bold();\nmyStyle.Font.Italics();\nmyStyle.Font.Underline();\nmyStyle.Font.Family('Times New Roman');\nmyStyle.Font.Color('FF0000');\nmyStyle.Font.Size(16);\nmyStyle.Font.Alignment.Vertical('top');\nmyStyle.Font.Alignment.Horizontal('left');\nmyStyle.Font.WrapText(true);\n\nvar myStyle2 = wb.Style();\nmyStyle2.Font.Size(14);\nmyStyle2.Number.Format(\"$#,##0.00;($#,##0.00);-\");\n\nvar myStyle3 = wb.Style();\nmyStyle3.Font.Size(14);\nmyStyle3.Number.Format(\"##%\");\nmyStyle3.Fill.Pattern('solid');\nmystyle3.Fill.Color('CCCCCC');\nmyStyle3.Border({\n\ttop:{\n\t\tstyle:'thin',\n\t\tcolor:'CCCCCC'\n\t},\n\tbottom:{\n\t\tstyle:'thick'\n\t},\n\tleft:{\n\t\tstyle:'thin'\n\t},\n\tright:{\n\t\tstyle:'thin'\n\t}\n});\n\nws.Cell(1,1).Style(myStyle);\nws.Cell(1,2).String('My 2nd String').Style(myStyle);\nws.Cell(2,1).Style(myStyle2);\nws.Cell(2,2).Style(myStyle2);\nws.Cell(2,3).Style(myStyle2);\nws.Cell(2,4).Style(myStyle3);\n```\n\nFreeze Columns to prevent moving when scrolling horizontally  \nFirst example will freeze the first two columns (everything prior to the specified column);  \nSecond example will freeze the first two columns and scroll to the 8th column.  \n\n```\nws.Column(3).Freeze();\nws.Column(3).Freeze(8);\n\n```\nInsert an image into a WorkSheet  \nImage takes one argument which is relative path to image from node script  \nImage can be passed optional Position which takes 4 arguments  \nimg.Position(row, col, [rowOffset], [colOffset])  \nrow = top left corner of image will be anchored to top of this row  \ncol = top left corner of image will be anchored to left of this column  \nrowOffset = offset from top of row in EMUs  \ncolOfset = offset from left of col in EMUs \n  \nCurrently images should be saved at a resolution of 96dpi. \n\n```\nvar img1 = ws.Image(imgPath);\nimg1.Position(1,1);\n\nvar img2 = ws.Image(imgPath2).Position(3,3,1000000,2000000);\n```\n\nWrite the Workbook to file or node response\n\n```\nwb.write(\"My Excel File.xlsx\");\nwb.write(\"My Excel File.xlsx\",res);\n\n```\n\n### ToDo\n* Add Date functions\n* Add ability to apply styles to cell range\n* Add ability to merge cells\n* Add Text formatting options (cell with more than one font size/color/decoration)\n",
  "_id": "excel4node@0.0.10",
  "_from": "excel4node@~0.0.9"
}
